name: 构建并发布 APK

on:
  push:
    tags:
      - 'v*' # 当推送 v 开头的标签时触发 (如 v1.0.0)
  workflow_dispatch: # 手动触发选项
    inputs:
      version-tag:
        description: '版本标签 (例如 v1.0.0)'
        required: true
      is-prerelease:
        description: '标记为预发布版本'
        type: boolean
        default: false
      build-type:
        description: '构建类型'
        type: choice
        options:
          - apk
          - appbundle
        default: 'apk'

permissions:
  contents: write

env:
  FLUTTER_VERSION: '3.32.1'
  ANDROID_BUILD_TOOLS: "34.0.0"
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  # 新增优化变量
  GRADLE_BUILD_CACHE_ENABLED: "true"
  GRADLE_BUILD_CACHE_DIR: "${{ runner.temp }}/gradle-build-cache"
  GRADLE_CONFIG_CACHE_ENABLED: "true"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 优化缓存策略
      - name: 缓存 Flutter SDK
        uses: actions/cache@v3
        id: flutter-sdk-cache
        with:
          path: ~/flutter
          key: flutter-sdk-${{ env.FLUTTER_VERSION }}

      - name: 缓存 Pub 依赖
        uses: actions/cache@v3
        id: pub-cache
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}

      - name: 缓存 Gradle
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.GRADLE_BUILD_CACHE_DIR }}
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: 设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: false

      - name: 安装依赖
        run: |
          flutter pub get
          flutter precache --android

      - name: 设置 JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 设置 Android SDK (优化版)
        uses: android-actions/setup-android@v2
        with:
          build-tools-version: ${{ env.ANDROID_BUILD_TOOLS }}
          platform-version: "34"
          ndk-version: "25.2.9519653"
          disable-animations: true
          disable-license-packages: "cmake;lldb;ndk"

      - name: 配置 Gradle 属性优化
        run: |
          echo "org.gradle.caching=${{ env.GRADLE_BUILD_CACHE_ENABLED }}" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -XX:MaxMetaspaceSize=1g" >> android/gradle.properties
          echo "org.gradle.configuration-cache=${{ env.GRADLE_CONFIG_CACHE_ENABLED }}" >> android/gradle.properties
          echo "org.gradle.unsafe.configuration-cache=true" >> android/gradle.properties
          echo "android.enableBuildCache=true" >> android/gradle.properties
          echo "build.cache.dir=${{ env.GRADLE_BUILD_CACHE_DIR }}" >> android/gradle.properties

      - name: 创建版本标签 (仅手动触发时执行)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git config --global user.name "laopaoer-wallet"
          git config --global user.email "laopaoer@protonmail.com"
          git tag ${{ github.event.inputs.version-tag }}
          git push origin ${{ github.event.inputs.version-tag }}

      - name: 构建 APK 或 App Bundle (优化版)
        run: |
          # 启用 Flutter 构建优化
          export FLUTTER_BUILD_ARGS="--release --no-tree-shake-icons --verbose"
          
          if [ "${{ github.event.inputs.build-type || 'apk' }}" = "appbundle" ]; then
            flutter build appbundle $FLUTTER_BUILD_ARGS
          else
            flutter build apk $FLUTTER_BUILD_ARGS --split-per-abi --target-platform android-arm,android-arm64
          fi

      - name: 签名 APK (优化版)
        if: ${{ github.event.inputs.build-type == 'apk' || github.event.inputs.build-type == '' }}
        run: |
          export PATH="$ANDROID_HOME/build-tools/${{ env.ANDROID_BUILD_TOOLS }}:$PATH"
          
          # 创建临时密钥库文件
          KEYSTORE_FILE=$(mktemp)
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > "$KEYSTORE_FILE"
          
          # 并行签名 APK 文件
          find build/app/outputs/flutter-apk -name '*.apk' | xargs -P 4 -I {} \
            apksigner sign \
              --ks "$KEYSTORE_FILE" \
              --ks-pass pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
              --key-pass pass:${{ secrets.KEY_PASSWORD }} \
              --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
              {}
          
          # 安全删除密钥库文件
          rm -f "$KEYSTORE_FILE"

      - name: 确定发布信息
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
            echo "release_name=发布 ${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "release_name=发布 ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: 创建发布并上传资源
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.tag }}
          name: ${{ steps.release-info.outputs.release_name }}
          prerelease: ${{ github.event.inputs.is-prerelease || false }}
          generate_release_notes: true
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}