name: Build and Release APK

on:
  push:
    tags:
      - 'v*' # 当推送以v开头的标签时触发，例如v1.0.0
  workflow_dispatch: # 添加手动触发选项
    inputs:
      version-tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
      is-prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
      build-type:
        description: 'Build type'
        type: choice
        options:
          - apk
          - appbundle
        default: 'apk'

permissions:
  contents: write

env:
  FLUTTER_VERSION: '3.32.1'
  ANDROID_BUILD_TOOLS: "34.0.0"
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # 只获取最近一次提交，加快检出速度

      # 使用更高效的缓存策略
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        id: flutter-sdk-cache
        with:
          path: ~/flutter
          key: flutter-sdk-${{ env.FLUTTER_VERSION }}

      - name: Cache Pub dependencies
        uses: actions/cache@v3
        id: pub-cache
        with:
          path: ~/.pub-cache
          key: pub-${{ hashFiles('pubspec.lock') }}

      - name: Cache Gradle
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: false # 禁用默认缓存，使用我们自定义的缓存

      - name: Install dependencies
        run: |
          flutter pub get
          flutter precache --android

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          build-tools-version: ${{ env.ANDROID_BUILD_TOOLS }}
          platform-version: "34"
          ndk-version: "25.2.9519653" # 指定NDK版本避免下载最新版
          disable-animations: true # 禁用动画加快构建速度

      - name: Create version tag (manual trigger only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git config --global user.name "laopaoer-wallet"
          git config --global user.email "laopaoer@protonmail.com"
          git tag ${{ github.event.inputs.version-tag }}
          git push origin ${{ github.event.inputs.version-tag }}

      - name: Build APK or App Bundle
        run: |
          # 启用Gradle构建缓存和并行构建
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError" >> android/gradle.properties
          
          if [ "${{ github.event.inputs.build-type || 'apk' }}" = "appbundle" ]; then
            flutter build appbundle --release --no-tree-shake-icons
          else
            flutter build apk --release --split-per-abi --no-tree-shake-icons
          fi

      - name: Sign APK (仅当构建类型为apk时执行)
        if: ${{ github.event.inputs.build-type == 'apk' || github.event.inputs.build-type == '' }}
        run: |
          export PATH="$ANDROID_HOME/build-tools/${{ env.ANDROID_BUILD_TOOLS }}:$PATH"
          
          # 使用更快的签名方式
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/keystore.jks
          
          for apk in build/app/outputs/flutter-apk/*.apk; do
            apksigner sign \
              --ks android/keystore.jks \
              --ks-pass pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
              --key-pass pass:${{ secrets.KEY_PASSWORD }} \
              --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
              "$apk"
          done
          
          # 清理敏感文件
          rm -f android/keystore.jks

      - name: Determine release info
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.tag }}
          name: ${{ steps.release-info.outputs.release_name }}
          prerelease: ${{ github.event.inputs.is-prerelease || false }}
          generate_release_notes: true
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}